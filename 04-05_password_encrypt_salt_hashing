---------Password Protection----------

On of the most sensitive data that go back and forth between clients and servers are user credential and more specifically
the users password. So we have to handle it with special care and one reason to do so is because users tend to use the same
password among many services.

The best practise is to never store the password as is but a hash that cames out from consuming a password with a hashing
algorithm.

But this is not enough because an attacker might have a dictionary of hashed, often used passwords and run his dictionary
against a websites log-in form and find a hit. Therefore it is always a good idea to salt* the password before hashing.

Even by salting the password we are vulnerable to an attacker if the table with salt values licks from our database.
So as good measure to stall the attacker and buy some time to react the hashing algorithm that we use should be slow enough
like bcrypt that it will make the attackers job really inefficient.
As we have seen in class older faster algorithms are easy to hack because you can run thousands of conventions/consumptions in
in a tiny amount of time.

*Salt is a random string of characters and is concatenated to the password before hashing to generate a better factor
 of randomness.